/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Copyright (c) 2015 Ubaka Onyechi
*
* kvr is free software distributed under the MIT license.
* See https://raw.githubusercontent.com/uonyx/kvr/master/LICENSE for details.
*/

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

#include "streams.h"

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void example_encode_stream ()
{
  // create a kvr context
  kvr::ctx *ctx = kvr::ctx::create ();

  // create value
  kvr::value *val = ctx->create_value ();

  // transcode from a JSON file to a MSGPACK file
  {
    file_istream<BUFSIZ> inputfile ("data/ARN-x.json");
    if (val->decode (kvr::CODEC_JSON, inputfile))
    {
      printf ("%s\n", "Decoded to \"ARN-x.json\"");

      file_ostream<BUFSIZ> outputfile ("data/ARN-x.msgpack");
      if (val->encode (kvr::CODEC_MSGPACK, &outputfile))
      {
        printf ("%s\n", "Encoded from \"ARN-x.msgpack\"");
      }
    }
  }

  // encode to hexadecimal string of CBOR-encoded value
  {
    hex_ostream cborhex;
    if (val->encode (kvr::CODEC_CBOR, &cborhex))
    {
      const char *hexstr = cborhex.data ();
      printf ("CBOR-HEX: %s\n", hexstr);
    }
  }

#if KVR_EXAMPLE_HAVE_OPENSSL
  // encode to SHA1 string of JSON-encoded value
  {
    sha1_ostream jsonsha1;
    if (val->encode (kvr::CODEC_JSON, &jsonsha1))
    {
      const char *sha1str = jsonsha1.data ();
      printf ("JSON-SHA1: %s\n", sha1str);
    }
  }
#endif

  // clean up
  ctx->destroy_value (val);

  // destroy context
  kvr::ctx::destroy (ctx);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

int main ()
{
  example_encode_stream ();

  return 0;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
