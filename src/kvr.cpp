/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "kvr.h"
#include "internal/kvr_internal.h"
#include <assert.h>

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

static const char * const kvr_const_str_null  = "null";
static const char * const kvr_const_str_true  = "true";
static const char * const kvr_const_str_false = "false";
static const char * const kvr_const_str_set   = "set";
static const char * const kvr_const_str_add   = "add";
static const char * const kvr_const_str_rem   = "rem";

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr * kvr::create_context (uint32_t flags)
{
  kvr *ctx = new kvr ();

  return ctx;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::destroy_context (kvr *ctx)
{
  KVR_ASSERT (ctx);

  delete ctx;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::kvr () : m_keystore (16)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::~kvr ()
{
#if KVR_DEBUG
  KVR_ASSERT (m_keystore.empty ());

  printf ("load_factor:       %f\n", m_keystore.load_factor ());
  printf ("bucket_count:      %d\n", m_keystore.bucket_count ());
  printf ("max_size:          %d\n", m_keystore.max_size ());
  printf ("max_load_factor:   %f\n", m_keystore.max_load_factor ());
  printf ("max_bucket_count:  %d\n", m_keystore.max_bucket_count ());

#else
  // clean up left-over keys
  keystore::iterator iter = m_keystore.begin ();  
  while (iter != m_keystore.end ())
  {
    key *k = (*iter).second;
    KVR_ASSERT (k);
    delete k;

    m_keystore.erase (iter);
    iter = m_keystore.begin ();
  }
#endif
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::create_value ()
{
  value *v = this->_create_value_null (VALUE_FLAG_PARENT_CTX);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::destroy_value (value *v)
{
  this->_destroy_value (VALUE_FLAG_PARENT_CTX, v);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value_null (uint32_t parentType)
{
  value *v = new value (this, parentType);

  v->conv_null ();

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value_map (uint32_t parentType)
{
  value *v = new value (this, parentType);

  v->_conv_map ();

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value_array (uint32_t parentType)
{
  value *v = new value (this, parentType);

  v->conv_array ();

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value (uint32_t parentType, int64_t number)
{
  value *v = new value (this, parentType);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  v->conv_number_i ();
#endif
  v->set_number_i (number);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


kvr::value * kvr::_create_value (uint32_t parentType, double number)
{
  value *v = new value (this, parentType);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  v->conv_number_f ();
#endif
  v->set_number_f (number);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value (uint32_t parentType, bool boolean)
{
  value *v = new value (this, parentType);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  v->conv_boolean ();
#endif
  v->set_boolean (boolean);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::_create_value (uint32_t parentType, const char *str, sz_t len)
{
  KVR_ASSERT (str);

  value *v = new value (this, parentType);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  v->conv_string ();
#endif
  v->set_string (str);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::_destroy_value (uint32_t parentType, value *v)
{
  KVR_ASSERT (v);
  KVR_ASSERT ((v->m_flags & parentType) != 0);

  delete v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::key * kvr::_find_key (const char *str)
{
  KVR_ASSERT (str);

  key *k = NULL;

  keystore::iterator iter = m_keystore.find (str);
  if (iter != m_keystore.end ())
  {
    k = (*iter).second;
  }

  return k;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::key * kvr::_create_key (const char *str, bool move)
{
  KVR_ASSERT (str);

  key *k = NULL;

  keystore::iterator iter = m_keystore.find (str);
  if (iter != m_keystore.end ())
  {
    k = (*iter).second;
    k->m_ref++;
  }
  else
  {
    k = new key (str, move);
    std::pair<const char *, key *> p (k->m_str, k);
    bool s = m_keystore.insert (p).second;
    KVR_ASSERT (s);
  }

  return k;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::_destroy_key (key *k)
{
  KVR_ASSERT (k);

  if ((--k->m_ref) == 0)
  {
    m_keystore.erase (k->m_str);
    delete k;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

char * kvr::_create_path_expr (const char **path, sz_t pathsz, sz_t *exprsz) const
{
  KVR_ASSERT (pathsz > 0);

  char *expr = NULL;

  if (pathsz > 0)
  {
    // pre-calculate key buffer size
    sz_t expsz = 0;
    for (sz_t i = 0; i < pathsz; ++i)
    {
      const char *p = path [i];
      KVR_ASSERT (p);

      size_t plen = strlen (p);
      KVR_ASSERT (plen < MAX_SZ_T);

      expsz += (sz_t) plen;
      expsz += 1; // for delimiter/null character
    }

    if (expsz > 0)
    {
      // create key
      expr = new char [expsz];

      char *dst = expr;
      const char delim = KVR_CONSTANT_TOKEN_DELIMITER;

      for (sz_t i = 0; i < pathsz; ++i)
      {
        const char *p = path [i];
        KVR_ASSERT (p);

        while ((*dst++ = *p++)) {}
        *(dst - 1) = delim;
      }

      *(dst - 1) = 0;
    }

    if (exprsz)
    {
      *exprsz = expsz;
    }
  }

  return expr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::_destroy_path_expr (char *expr)
{
  delete [] expr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::key
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::key::key (const char *str, bool move) : m_ref (1)
{
  KVR_ASSERT (str);

  if (move)
  {
    m_str = const_cast<char *> (str);
  }
  else
  {    
    size_t sz = strlen (str) + 1;
    m_str = new char [sz];
    kvr_strcpy (m_str, sz, str);
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::key::~key ()
{
  delete [] m_str;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

const char *kvr::key::get_string () const
{
  return m_str;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::value
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value::value (kvr *ctx, uint32_t flags) : m_flags (flags), m_ctx (ctx)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value::~value () 
{
  this->_destruct (); 
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_null ()
{
  if (!is_null ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_NULL;
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_map ()
{
  return this->_conv_map ();  
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_array ()
{
  return this->_conv_array ();  
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_string ()
{
  if (!is_string ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_STT_STRING;
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_boolean ()
{
  if (!is_boolean ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_BOOLEAN;
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_number_i ()
{
  if (!is_number_i ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_NUMBER_INTEGER;
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::conv_number_f ()
{
  if (!is_number_f ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_NUMBER_FLOAT;
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::set_string (const char *str)
{
  KVR_ASSERT_SAFE (str, (void)0);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF  
  KVR_ASSERT (is_string ());
#else
  conv_string ();
#endif

  size_t len = strlen (str);  
  KVR_ASSERT ((uint64_t) len < kvr::MAX_SZ_T);
  this->_set_string (str, (sz_t) len);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::set_boolean (bool b)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF  
  KVR_ASSERT (is_boolean ());
#else
  conv_boolean ();
#endif
  
  m_data.b = b;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::set_number_i (int64_t n)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_number_integer ());
#else  
  conv_number_i ();
#endif

  m_data.n.i = n;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::set_number_f (double n)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF  
  KVR_ASSERT (is_number_float ());
#else  
  conv_number_f ();
#endif

  m_data.n.f = n;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

const char * kvr::value::get_string () const
{
  KVR_ASSERT (is_string ());
  return _is_string_dynamic () ? m_data.s.m_dyn.data : m_data.s.m_stt.data;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::get_boolean () const
{
  KVR_ASSERT (is_boolean ());
  return m_data.b;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

int64_t kvr::value::get_number_i () const
{
  KVR_ASSERT (_is_number ());
  return is_number_i () ? m_data.n.i : (int64_t) m_data.n.f;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

double kvr::value::get_number_f () const
{
  KVR_ASSERT (_is_number ());
  return is_number_f () ? m_data.n.f : (double) m_data.n.i;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push (int64_t number)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_array ());
#else  
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_ARRAY, number);
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push (double number)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF  
  KVR_ASSERT (is_array ());
#else
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_ARRAY, number);
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push (bool boolean)
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_array ());
#else  
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_ARRAY, boolean);  
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push (const char *str)
{
  KVR_ASSERT_SAFE (str, NULL);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_array ());
#else
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_ARRAY, str, (sz_t) strlen (str));
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push_map ()
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF  
  KVR_ASSERT (is_array ());
#else
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value_map (VALUE_FLAG_PARENT_ARRAY);
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push_array ()
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_array ());
#else
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value_array (VALUE_FLAG_PARENT_ARRAY);
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::push_null ()
{
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_array ());
#else
  _conv_array ();
#endif

  kvr::value *v = m_ctx->_create_value_null (VALUE_FLAG_PARENT_ARRAY);
  this->m_data.a.push (v);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::pop ()
{
  KVR_ASSERT (is_array ());

  bool ret = false;

  kvr::value *v = this->m_data.a.pop ();
  if (v)
  {
    m_ctx->_destroy_value (VALUE_FLAG_PARENT_ARRAY, v);
    ret = true;
  }

  return ret;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::element (kvr::sz_t index) const
{
  KVR_ASSERT (is_array ());
  
  value *v = this->m_data.a.elem (index);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::sz_t kvr::value::size () const
{
  KVR_ASSERT (is_array ());

  sz_t size = this->m_data.a.m_len;

  return size;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert (const char *keystr, int64_t number)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    p->m_v->set_number_i (number);
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_MAP, number);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert (const char *keystr, double number)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());  
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    p->m_v->set_number_f (number);
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_MAP, number);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert (const char *keystr, bool boolean)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) < KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    p->m_v->set_boolean (boolean);
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_MAP, boolean);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert (const char *keystr, const char *str)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);
  KVR_ASSERT_SAFE (str, NULL);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    p->m_v->set_string (str);
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value (VALUE_FLAG_PARENT_MAP, str, (sz_t) strlen (str));    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert_map (const char *keystr)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value_map (VALUE_FLAG_PARENT_MAP);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert_array (const char *keystr)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value_array (VALUE_FLAG_PARENT_MAP);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::insert_null (const char *keystr)
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (strlen (keystr) <= KVR_CONSTANT_MAX_KEY_LENGTH);

#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
  KVR_ASSERT (is_map ());
#else
  _conv_map ();
#endif

  pair *p = NULL;

  key *k = m_ctx->_create_key (keystr);
  KVR_ASSERT (k);

#if !KVR_OPTIMIZATION_FAST_MAP_INSERT_ON
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  if (p)
  {
    m_ctx->_destroy_key (k);
  }
  else
#endif
  {
    value *v = m_ctx->_create_value_null (VALUE_FLAG_PARENT_MAP);    
    p = m_data.m.insert (k, v);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::remove (kvr::pair *pair)
{
  KVR_ASSERT (pair);
  KVR_ASSERT (is_map ());

  bool rm = false;

  key *k = pair->m_k;
  value *v = pair->m_v;

  if (m_data.m.remove (pair)) // mark k,v as null
  {
    m_ctx->_destroy_key (k);
    m_ctx->_destroy_value (VALUE_FLAG_PARENT_MAP, v);

    rm = true;
  }

  return rm;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::find (const char *keystr) const
{
  KVR_ASSERT (keystr);
  KVR_ASSERT (is_map ());

  pair *p = NULL;

  key *k = m_ctx->_find_key (keystr);

  if (k)
  {
    p = this->m_data.m.find (k);
  }

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value::cursor kvr::value::fcursor () const
{
  KVR_ASSERT (is_map ());
  
  return cursor (&m_data.m);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::search (const char *pathexpr) const
{
  KVR_ASSERT (is_map () || is_array ());
  KVR_ASSERT (pathexpr);

  value *v = this->_search_path_expr (pathexpr);

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::search (const char **path, sz_t pathsz) const
{
  KVR_ASSERT (is_map () || is_array ());
  KVR_ASSERT (path);
  KVR_ASSERT (pathsz > 0);

  value *v = (pathsz > 0) ? (value *) this : NULL;

  sz_t pc = 0;

  while (v && (pc < pathsz))
  {
    const char *key = path [pc++];

    v = v->_search_key (key);
  }

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::copy (const value *rhs)
{
  KVR_ASSERT (rhs);

  if (this != rhs)
  {
    //////////////////////////////////
    if (rhs->is_map ())
    //////////////////////////////////
    {
      this->_conv_map (rhs->m_data.m.m_cap);

      cursor c = rhs->fcursor ();
      pair  *rp = c.get ();
      while (rp)
      {
        const char *rk = rp->get_key ();
        pair *lp = this->insert_null (rk);

        value *rv = rp->get_value ();
        value *lv = lp->get_value ();
        lv->copy (rv);

        rp = c.get ();
      }
    }

    //////////////////////////////////
    else if (rhs->is_array ())
    //////////////////////////////////
    {
      this->_conv_array (rhs->size ());

      for (sz_t i = 0, c = rhs->size (); i < c; ++i)
      {
        value *rv = rhs->element (i);
        value *lv = this->push_null ();
        lv->copy (rv);
      }
    }

    //////////////////////////////////
    else if (rhs->is_string ())
    //////////////////////////////////
    {
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
      this->conv_string ();
#endif
      const char *str = rhs->get_string ();
      this->set_string (str);
    }

    //////////////////////////////////
    else if (rhs->is_number_i ())
    //////////////////////////////////
    {
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
      this->conv_number_i ();
#endif
      int64_t n = rhs->get_number_i ();
      this->set_number_i (n);
    }

    //////////////////////////////////
    else if (rhs->is_number_f ())
    //////////////////////////////////
    {
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
      this->conv_number_f ();
#endif
      double n = rhs->get_number_f ();
      this->set_number_f (n);
    }

    //////////////////////////////////
    else if (rhs->is_boolean ())
    //////////////////////////////////
    {
#if KVR_OPTIMIZATION_IMPLICIT_TYPE_CONVERSION_OFF
      this->conv_boolean ();
#endif
      bool b = rhs->get_boolean ();
      this->set_boolean (b);
    }

    //////////////////////////////////
    else if (rhs->is_null ())
    //////////////////////////////////
    {
      this->conv_null ();
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::dump () const
{
  this->_dump (0, NULL);
  fprintf (stderr, "\n");
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::serialize (data_format format, strbuffer *strbuf) const
{
  KVR_ASSERT_SAFE (strbuf, false);

  bool success = false;

  strbuf->_reset ();

  switch (format)
  {
    case kvr::DATA_FORMAT_JSON:
    {
      success = kvr_internal::json_write (this, &strbuf->m_str, &strbuf->m_len);
      break;
    }

    case kvr::DATA_FORMAT_MSGPACK:
    {
      break;
    }

    default:
    {
      break;
    }
  }
  
  return success;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::deserialize (data_format format, const char *str)
{
  KVR_ASSERT_SAFE (str, false);

  bool success = false;

  this->conv_null ();

  switch (format)
  {
    case kvr::DATA_FORMAT_JSON:
    {
      success = kvr_internal::json_read (this, str, 0);
      break;
    }

    case kvr::DATA_FORMAT_MSGPACK:
    {
      break;
    }

    default:
    {
      break;
    }
  }

  return success;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::diff (const value *original, const value *modified)
{
  bool success = false;
  KVR_ASSERT (original);
  KVR_ASSERT (modified);

  value *diff = this;

  const value *og = original;
  const value *md = modified;

  if (og && md && (og != md) && ((og->_type () == md->_type ()) || (og->_is_number () && md->_is_number ()) || (og->is_string () && md->is_string ())))
  {
    //////////////////////////////////
    if (og->is_map () || og->is_array ())
    //////////////////////////////////
    {
      diff->_conv_map ();

      pair *set = diff->insert_map (kvr_const_str_set);
      pair *add = diff->insert_map (kvr_const_str_add);
      pair *rem = diff->insert_array (kvr_const_str_rem);

      KVR_ASSERT (set);
      KVR_ASSERT (add);
      KVR_ASSERT (rem);

      const char * path [KVR_CONSTANT_MAX_TREE_DEPTH];

#if KVR_DEBUG
      memset (path, 0, sizeof (path));
#endif
      diff->_diff_set (set->get_value (), rem->get_value (), og, md, path, KVR_CONSTANT_MAX_TREE_DEPTH, 0);

#if KVR_DEBUG
      memset (path, 0, sizeof (path));
#endif
      diff->_diff_add (add->get_value (), og, md, path, KVR_CONSTANT_MAX_TREE_DEPTH, 0);
    }

    //////////////////////////////////
    else if (og->is_string ())
    //////////////////////////////////
    {
      const char *ogstr = og->get_string ();
      const char *mdstr = md->get_string ();

      if (strcmp (ogstr, mdstr) != 0)
      {
        diff->copy (md);
      }
    }

    //////////////////////////////////
    else if (og->is_number_i ())
    //////////////////////////////////
    {
      KVR_ASSERT (md->_is_number ());

      if (md->is_number_i ())
      {
        int64_t ogn = og->get_number_i ();
        int64_t mdn = md->get_number_i ();

        if (ogn != mdn)
        {
          diff->copy (md);
        }
      }
      else if (md->is_number_f ())
      {
        double ogn = og->get_number_f ();
        double mdn = md->get_number_f ();

        if (fabs (ogn - mdn) > KVR_CONSTANT_ZERO_TOLERANCE)
        {
          diff->copy (md);
        }
      }
    }

    //////////////////////////////////
    else if (og->is_number_f ())
    //////////////////////////////////
    {
      double ogn = og->get_number_f ();
      double mdn = md->get_number_f ();

      if (fabs (ogn - mdn) > KVR_CONSTANT_ZERO_TOLERANCE)
      {
        diff->copy (md);
      }
    }

    //////////////////////////////////
    else if (og->is_boolean ())
    //////////////////////////////////
    {
      bool ogb = og->get_boolean ();
      bool mdb = md->get_boolean ();

      if (ogb != mdb)
      {
        diff->copy (md);
      }
    }
  }

  return success;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::patch (const value *diff)
{
  KVR_ASSERT (diff);

  bool success = false;

  value *tg = this;

  if (diff->is_map () && (tg->is_map () || tg->is_array ()))
  {
    // patch
    pair *set = diff->find (kvr_const_str_set);
    pair *add = diff->find (kvr_const_str_add);
    pair *rem = diff->find (kvr_const_str_rem);

    KVR_ASSERT (set);
    KVR_ASSERT (add);
    KVR_ASSERT (rem);

    tg->_patch_set (set->get_value ());
    tg->_patch_add (add->get_value ());
    tg->_patch_rem (rem->get_value ());

    success = true;
  }
  else if (diff->is_array ())
  {
    // do nothing.
  }
  else if ((diff->_type () == diff->_type ()) || (diff->_is_number () && tg->_is_number ()))
  {
    tg->copy (diff);

    success = true;
  }

  return success;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::_conv_map (sz_t size)
{
  if (!is_map ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_MAP;
    m_data.m.init (size);
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::_conv_array (sz_t size)
{
  if (!is_array ())
  {
    this->_clear ();
    m_flags |= VALUE_FLAG_TYPE_ARRAY;
    m_data.a.init (size);
  }

  return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::sz_t kvr::value::_get_string_length () const
{
  KVR_ASSERT (is_string ());

  sz_t slen = 0;

  if (_is_string_dynamic ())
  {
    slen = m_data.s.m_dyn.len;
  }
  else
  {
    slen = (sz_t) strlen (m_data.s.m_stt.data);
  }

  return slen;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::sz_t kvr::value::_get_string_size () const
{
  KVR_ASSERT (is_string ());

  sz_t ssize = 0;

  if (_is_string_dynamic ())
  {
    ssize = m_data.s.m_dyn.size;
  }
  else
  {
    ssize = string::stt_str::CAP;
  }

  return ssize;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_set_string (const char *str, sz_t len)
{
  KVR_ASSERT (str);
  KVR_ASSERT (is_string ());
  
  // check string type
  if (_is_string_static () && (len >= string::stt_str::CAP))
  {
    // init dynamic with size
    char *&sdata = m_data.s.m_dyn.data;
    sz_t &ssize = m_data.s.m_dyn.size;
    sz_t &slen = m_data.s.m_dyn.len;

    sz_t allocsz = (len + (string::dyn_str::PAD - 1)) & ~(string::dyn_str::PAD - 1);
    sdata = new char [allocsz];
    ssize = allocsz;
    slen = len;

    // toggle string types
    m_flags &= ~VALUE_FLAG_TYPE_STT_STRING;
    m_flags |= VALUE_FLAG_TYPE_DYN_STRING;
  }

  // set string
  if (_is_string_dynamic ())
  {
    this->_set_string_dyn (str, len + 1);
  }
  else
  {
    this->_set_string_stt (str);
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_set_string_stt (const char *str)
{
  KVR_ASSERT (str);
  KVR_ASSERT (is_string ());

  kvr_strcpy (m_data.s.m_stt.data, string::stt_str::CAP, str);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_set_string_dyn (const char *str, sz_t size)
{
  KVR_ASSERT (str);
  KVR_ASSERT (size > 0);
  KVR_ASSERT (is_string ());

  char *&sdata = m_data.s.m_dyn.data;
  sz_t &ssize = m_data.s.m_dyn.size;
  sz_t &slen = m_data.s.m_dyn.len;

  sz_t allocsz = (size + (string::dyn_str::PAD - 1)) & ~(string::dyn_str::PAD - 1);
  if (allocsz > ssize)
  {
    KVR_ASSERT (sdata);
    delete [] sdata;
    sdata = new char [allocsz];
    ssize = allocsz;
  }

  slen = size - 1;
  kvr_strcpy (sdata, ssize, str);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_move_string_dyn (char *str, sz_t size)
{
  KVR_ASSERT (str);
  KVR_ASSERT (size > 0);
  KVR_ASSERT (is_string ());

  char *&sdata = m_data.s.m_dyn.data;
  sz_t &ssize = m_data.s.m_dyn.size;
  sz_t &slen = m_data.s.m_dyn.len;

  if (_is_string_dynamic ())
  {
    delete [] sdata;
  }
  else
  {
    m_flags &= ~VALUE_FLAG_TYPE_STT_STRING;
    m_flags |= VALUE_FLAG_TYPE_DYN_STRING;
  }

  sdata = str;
  ssize = size;
  slen = size - 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::_search_path_expr (const char *expr, const char **lastkey, value **lastparent) const
{
  KVR_ASSERT (expr);
  KVR_ASSERT (strlen (expr) > 0);

  // TODO: unicode parsing

  value *v = (expr [0] != 0) ? (value *) this : NULL;

  const char delim = KVR_CONSTANT_TOKEN_DELIMITER;
  const char *e1 = expr;
  const char *e2 = strchr (e1, delim);

  char k [KVR_CONSTANT_MAX_KEY_LENGTH + 1];

  while (v && e2)
  {
    sz_t klen = e2 - e1;
    KVR_ASSERT (klen <= KVR_CONSTANT_MAX_KEY_LENGTH);
    kvr_strncpy (k, e1, klen);
    v = v->_search_key (k);

    e1 = ++e2;
    e2 = strchr (e1, delim);
  }

  if (lastparent)
  {
    *lastparent = v;
  }

  if (lastkey)
  {
    *lastkey = e1;
  }

  if (v && e1 && (*e1 != 0))
  {
    kvr_strcpy (k, KVR_CONSTANT_MAX_KEY_LENGTH, e1);

    v = v->_search_key (k);
  }

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::_search_key (const char *key) const
{
  KVR_ASSERT (key);

  value *v = NULL;

  //////////////////////////////////
  if (this->is_map ())
  //////////////////////////////////
  {
    pair *p = this->find (key);
    v = p ? p->get_value () : NULL;
  }

  //////////////////////////////////
  else if (this->is_array ())
  //////////////////////////////////
  {
    char k0 = key [0];
    switch (k0)
    {
      case KVR_CONSTANT_TOKEN_MAP_GREP: // pattern match in array of maps
      {
        const char eq = '=';
        const char *pattern = &key [1];
        const char *s = strchr (pattern, eq);

        if (s)
        {
          char sk [KVR_CONSTANT_MAX_KEY_LENGTH + 1];

          sz_t klen = s - pattern;
          KVR_ASSERT (klen <= KVR_CONSTANT_MAX_KEY_LENGTH);
          kvr_strncpy  (sk, pattern, klen);

          const char *sv = s + 1;

          for (sz_t i = 0, c = this->size (), f = 0; (i < c) && !f; ++i)
          {
            value *m = this->element (i);

            if (m && m->is_map ())
            {
              cursor cur = m->fcursor ();
              pair *p = cur.get ();

              while (p)
              {
                const char *pk = p->get_key ();
                if (pk && (strcmp (pk, sk) == 0))
                {
                  // got key, now check value
                  value *pv = p->get_value ();
                  KVR_ASSERT (pv);

                  if (pv->is_string ())
                  {
                    const char *pvstr = pv->get_string ();
                    if (strcmp (sv, pvstr) == 0)
                    {
                      v = pv;
                      f = 1;
                      break;
                    }
                  }
                  else if (pv->is_number_f ())
                  {
                    double svf = strtod (sv, NULL); //atof (sv);
                    double pvf = pv->get_number_f ();                    
                    if (fabs (svf - pvf) <= KVR_CONSTANT_ZERO_TOLERANCE)
                    {
                      v = pv;
                      f = 1;
                      break;
                    }
                  }
                  else if (pv->is_number_i ())
                  {
                    int64_t svi = atoi (sv);
                    int64_t pvi = pv->get_number_i ();
                    if (svi == pvi)
                    {
                      v = pv;
                      f = 1;
                      break;
                    }
                  }
                  else if (pv->is_boolean ())
                  {
                    int valid = (strcmp (sv, kvr_const_str_false) == 0) ? 0 : (strcmp (sv, kvr_const_str_true) == 0) ? 1 : -1;
                    if (valid != -1)
                    {
                      bool svb = valid ? true : false;
                      bool pvb = pv->get_boolean ();
                      if (svb == pvb)
                      {
                        v = pv;
                        f = 1;
                        break;
                      }
                    }
                  }
                  else if (pv->is_null ())
                  {
                    bool svnull = (strcmp (sv, kvr_const_str_null) == 0);
                    if (svnull)
                    {
                      v = pv;
                      f = 1;
                      break;
                    }
                  }
                }

                p = cur.get ();
              }
            }
          }
        }        
        break;
      }

      default:
      {
        sz_t ki = (sz_t) atoi (key);
        v = this->element (ki);
        break;
      }
    }
  }

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t kvr::value::_type () const
{
  const uint32_t typeFlagsMask = 0xffffff00;

  uint8_t t = m_flags & ~typeFlagsMask;

  return t;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_destruct ()
{
  if (is_map ())
  {
    cursor c = fcursor ();
    pair  *p = c.get ();
    while (p)
    {
      m_ctx->_destroy_key (p->m_k);
      m_ctx->_destroy_value (VALUE_FLAG_PARENT_MAP, p->m_v);
      p = c.get ();
    }
    m_data.m.deinit ();
  }
  else if (is_array ())
  {
    sz_t c = this->size ();
    while (c)
    {
      this->pop ();
      c = this->size ();
    }
    m_data.a.deinit ();
  }
  else if (_is_string_dynamic ())
  {
    KVR_ASSERT (m_data.s.m_dyn.data);
    delete [] m_data.s.m_dyn.data;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_clear ()
{
  // release memory
  this->_destruct ();

  // zero data
  memset (&m_data, 0, sizeof (m_data));

  // clear type flag
  const uint32_t typeFlagsMask = 0xffffff00;

  m_flags &= typeFlagsMask;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_dump (size_t lpad, const char *key) const
{
  for (size_t t = 0; t < lpad; ++t)
  {
    fprintf (stderr, "  ");
  }

  if (key)
  {
    fprintf (stderr, "key = %s : ", key);
  }

  //////////////////////////////////
  if (this->is_map ())
  //////////////////////////////////
  {
    fprintf (stderr, "value = -> [map]\n");

    cursor c = fcursor ();
    pair  *p = c.get ();
    while (p)
    {
      const char *k = p->get_key ();
      value *v = p->get_value ();
      v->_dump (lpad + 1, k);

      p = c.get ();
    }
  }

  //////////////////////////////////
  else if (this->is_array ())
  //////////////////////////////////
  {
    fprintf (stderr, "value = -> [array]\n");

    char k [16];

    for (sz_t i = 0, c = this->size (); i < c; ++i)
    {
      size_t kl = kvr_internal::u32toa (i, k);
      k [kl] = 0;
      value *v = this->element (i);
      v->_dump (lpad + 1, k);
    }
  }

  //////////////////////////////////
  else if (this->is_string ())
  //////////////////////////////////
  {
    const char *str = get_string ();
    fprintf (stderr, "value = %s -> [string]\n", str);
  }

  //////////////////////////////////
  else if (this->is_number_i ())
  //////////////////////////////////
  {
    int64_t n = get_number_i ();
    fprintf (stderr, "value = %lld -> [int]\n", n);
  }

  //////////////////////////////////
  else if (this->is_number_f ())
  //////////////////////////////////
  {
    double n = get_number_f ();
    fprintf (stderr, "value = %g -> [float]\n", n);
  }

  //////////////////////////////////
  else if (this->is_boolean ())
  //////////////////////////////////
  {
    bool b = get_boolean ();
    fprintf (stderr, "value = %s -> [bool]\n", b ? kvr_const_str_true : kvr_const_str_false);
  }

  //////////////////////////////////
  else if (this->is_null ())
  //////////////////////////////////
  {
    fprintf (stderr, "value = %s -> [null]\n", kvr_const_str_null);
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_diff_set (value *set, value *rem, const value *og, const value *md,
                            const char **path, const sz_t pathsz, sz_t pathcnt)
{
  KVR_ASSERT (set);
  KVR_ASSERT (rem);

  if (og)
  {
    //////////////////////////////////
    if (md == NULL)
    //////////////////////////////////
    {
      // at this point og and md cannot be root values. therefore KVR_ASSERT (pathsz > 0)
      KVR_ASSERT (pathcnt > 0);
      // add og to rem list
      kvr *ctx = m_ctx;
      value *v = ctx->_create_value_null (VALUE_FLAG_PARENT_ARRAY);
      v->conv_string ();

      if (pathcnt == 1)
      {
        const char *pk = path [0];
        v->set_string (pk);
      }
      else
      {
        sz_t pksz = 0;
        char *pk = ctx->_create_path_expr (path, pathcnt, &pksz);
        v->_move_string_dyn (pk, pksz);
      }

      rem->_push_v (v);
    }

    //////////////////////////////////
    else if (!(og->_is_number () && md->_is_number ()) && !(og->is_string () && md->is_string ()) && (og->_type () != md->_type ()))
    //////////////////////////////////
    {
      // at this point og and md cannot be root values. therefore KVR_ASSERT (pathsz > 0)
      KVR_ASSERT (pathcnt > 0);

      kvr *ctx = m_ctx;
      key *k = NULL;
      if ((pathcnt == 1) && (ctx == og->m_ctx)) // path key must already be in the key store
      {
        const char *pk = path [0];
        KVR_ASSERT (ctx->_find_key (pk));
        k = ctx->_create_key (pk); // increment reference count
      }
      else
      {
        char *pk = ctx->_create_path_expr (path, pathcnt);
        k = ctx->_create_key (pk, false);
        if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
      }

      value *v = ctx->_create_value_null (VALUE_FLAG_PARENT_MAP);
      v->copy (md);
      set->_insert_kv (k, v);
    }

    //////////////////////////////////
    else if (og->is_map ())
    //////////////////////////////////
    {
      KVR_ASSERT (md->is_map ());

      value::cursor c = og->fcursor ();
      pair  *ogp = c.get ();

      while (ogp)
      {
        const char *k = ogp->get_key ();

        KVR_ASSERT (pathcnt < pathsz);
        path [pathcnt++] = k;

        pair * mdp = md->find (k);

        value *mdv = mdp ? mdp->get_value () : NULL;
        value *ogv = ogp->get_value ();

        _diff_set (set, rem, ogv, mdv, path, pathsz, pathcnt);

        path [--pathcnt] = NULL;

        ogp = c.get ();
      }
    }

    //////////////////////////////////
    else if (og->is_array ())
    //////////////////////////////////
    {
      KVR_ASSERT (md->is_array ());

      char k [16];
      for (sz_t i = 0, c = og->size (); i < c; ++i)
      {
        size_t kl = kvr_internal::u32toa (i, k);
        k [kl] = 0;

        KVR_ASSERT (pathcnt < pathsz);
        path [pathcnt++] = k;

        value *mdv = md->element (i);
        value *ogv = og->element (i);

        _diff_set (set, rem, ogv, mdv, path, pathsz, pathcnt);

        path [--pathcnt] = NULL;
      }
    }

    //////////////////////////////////
    else if (og->is_string ())
    //////////////////////////////////
    {
      KVR_ASSERT (pathcnt > 0);
      KVR_ASSERT (md->is_string ());

      const char *ogstr = og->get_string ();
      const char *mdstr = md->get_string ();

      if (strcmp (ogstr, mdstr) != 0)
      {
        kvr *ctx = m_ctx;
        key *k = NULL;
        if ((pathcnt == 1) && (ctx == og->m_ctx))
        {
          const char *pk = path [0];
          KVR_ASSERT (ctx->_find_key (pk));
          k = ctx->_create_key (pk);
        }
        else
        {
          char *pk = ctx->_create_path_expr (path, pathcnt);
          k = ctx->_create_key (pk, false);
          if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
        }

        sz_t mdstrlen = md->_get_string_length ();
        value *v = ctx->_create_value (VALUE_FLAG_PARENT_MAP, mdstr, mdstrlen);
        set->_insert_kv (k, v);
      }
    }

    //////////////////////////////////
    else if (og->is_number_i ())
    //////////////////////////////////
    {
      KVR_ASSERT (pathcnt > 0);
      KVR_ASSERT (md->_is_number ());

      if (md->is_number_i ())
      {
        int64_t ogn = og->get_number_i ();
        int64_t mdn = md->get_number_i ();

        if (ogn != mdn)
        {
          kvr *ctx = m_ctx;
          key *k = NULL;
          if ((pathcnt == 1) && (ctx == og->m_ctx))
          {
            const char *pk = path [0];
            KVR_ASSERT (ctx->_find_key (pk));
            k = ctx->_create_key (pk);
          }
          else
          {
            char *pk = ctx->_create_path_expr (path, pathcnt);
            k = ctx->_create_key (pk, true);
            if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
          }

          value *v = ctx->_create_value (VALUE_FLAG_PARENT_MAP, mdn);
          set->_insert_kv (k, v);
        }
      }
      else if (md->is_number_f ())
      {
        double ogn = og->get_number_f ();
        double mdn = md->get_number_f ();

        if (fabs (ogn - mdn) > KVR_CONSTANT_ZERO_TOLERANCE)
        {
          kvr *ctx = m_ctx;
          key *k = NULL;
          if ((pathcnt == 1) && (ctx == og->m_ctx))
          {
            const char *pk = path [0];
            KVR_ASSERT (ctx->_find_key (pk));
            k = ctx->_create_key (pk);
          }
          else
          {
            char *pk = ctx->_create_path_expr (path, pathcnt);
            k = ctx->_create_key (pk, true);
            if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
          }

          value *v = ctx->_create_value (VALUE_FLAG_PARENT_MAP, mdn);
          set->_insert_kv (k, v);
        }
      }
    }

    //////////////////////////////////
    else if (og->is_number_f ())
    //////////////////////////////////
    {
      KVR_ASSERT (pathcnt > 0);
      KVR_ASSERT (md->_is_number ());

      double ogn = og->get_number_f ();
      double mdn = md->get_number_f ();

      if (fabs (ogn - mdn) > KVR_CONSTANT_ZERO_TOLERANCE)
      {
        kvr *ctx = m_ctx;
        key *k = NULL;
        if ((pathcnt == 1) && (ctx == og->m_ctx))
        {
          const char *pk = path [0];
          KVR_ASSERT (ctx->_find_key (pk));
          k = ctx->_create_key (pk);
        }
        else
        {
          char *pk = ctx->_create_path_expr (path, pathcnt);
          k = ctx->_create_key (pk, true);
          if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
        }

        value *v = ctx->_create_value (VALUE_FLAG_PARENT_MAP, mdn);
        set->_insert_kv (k, v);
      }
    }

    //////////////////////////////////
    else if (og->is_boolean ())
      //////////////////////////////////
    {
      KVR_ASSERT (pathcnt > 0);
      KVR_ASSERT (md->is_boolean ());

      bool ogb = og->get_boolean ();
      bool mdb = md->get_boolean ();

      if (ogb != mdb)
      {
        kvr *ctx = m_ctx;
        key *k = NULL;
        if ((pathcnt == 1) && (ctx == og->m_ctx))
        {
          const char *pk = path [0];
          KVR_ASSERT (ctx->_find_key (pk));
          k = ctx->_create_key (pk);
        }
        else
        {
          char *pk = ctx->_create_path_expr (path, pathcnt);
          k = ctx->_create_key (pk, true);
          if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
        }

        value *v = ctx->_create_value (VALUE_FLAG_PARENT_MAP, mdb);
        set->_insert_kv (k, v);
      }
    }

    //////////////////////////////////
    else if (og->is_null ())
      //////////////////////////////////
    {
      KVR_ASSERT (md->is_null ());
      // should already be taken care of in type check
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_diff_add (value *add, const value *og, const value *md,
                            const char **path, const sz_t pathsz, sz_t pathcnt)
{
  KVR_ASSERT (add);

  //
  // go through md and og and look for nodes in md that are not in og

  if (md)
  {
    //////////////////////////////////
    if (og == NULL)
    //////////////////////////////////
    {
      // at this point og and md cannot be root values. therefore KVR_ASSERT (pathsz > 0)
      KVR_ASSERT (pathcnt > 0);
      // add md to add list

      kvr *ctx = m_ctx;
      key *k = NULL;
      if ((pathcnt == 1) && (ctx == md->m_ctx))
      {
        const char *pk = path [0];
        KVR_ASSERT (ctx->_find_key (pk));
        k = ctx->_create_key (pk);
      }
      else
      {
        char *pk = ctx->_create_path_expr (path, pathcnt);
        k = ctx->_create_key (pk, true);
        if (k->m_ref > 1) { ctx->_destroy_path_expr (pk); pk = NULL; }
      }

      value *v = ctx->_create_value_null (VALUE_FLAG_PARENT_MAP);
      v->copy (md);
      add->_insert_kv (k, v);
    }

    //////////////////////////////////
    else if (og->_type () != md->_type ())
    //////////////////////////////////
    {
      // at this point og and md cannot be root values. therefore KVR_ASSERT (pathsz > 0)
      KVR_ASSERT (pathcnt > 0);
      // handled by _diff_set
    }

    //////////////////////////////////
    else if (md->is_map ())
    //////////////////////////////////
    {
      KVR_ASSERT (og->is_map ());

      value::cursor c = md->fcursor ();
      pair  *mdp = c.get ();

      while (mdp)
      {
        const char *k = mdp->get_key ();

        KVR_ASSERT (pathcnt < pathsz);
        path [pathcnt++] = k;

        pair * ogp = og->find (k);

        value *ogv = ogp ? ogp->get_value () : NULL;
        value *mdv = mdp->get_value ();

        _diff_add (add, ogv, mdv, path, pathsz, pathcnt);

        path [--pathcnt] = NULL;

        mdp = c.get ();
      }
    }

    //////////////////////////////////
    else if (md->is_array ())
    //////////////////////////////////
    {
      KVR_ASSERT (og->is_array ());

      char k [16];

      for (sz_t i = 0, c = md->size (); i < c; ++i)
      {
        size_t kl = kvr_internal::u32toa (i, k);
        k [kl] = 0;

        KVR_ASSERT (pathcnt < pathsz);
        path [pathcnt++] = k;

        value *ogv = og->element (i);
        value *mdv = md->element (i);

        _diff_add (add, ogv, mdv, path, pathsz, pathcnt);

        path [--pathcnt] = NULL;
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_patch_set (const value *set)
{
  KVR_ASSERT (set);
  
  value *tg = this;

  kvr::value::cursor cursor = set->fcursor ();
  kvr::pair *p = cursor.get ();

  while (p)
  {
    const char *skey = p->get_key ();
    value *sval = p->get_value ();
    value *tgv = tg->_search_path_expr (skey);

    if (tgv)
    {
      tgv->copy (sval);
    }

    p = cursor.get ();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_patch_add (const value *add)
{
  KVR_ASSERT (add);

  value *tg = this;

  kvr::value::cursor cursor = add->fcursor ();
  kvr::pair *p = cursor.get ();

  while (p)
  {
    const char *akey = p->get_key ();
    value *aval = p->get_value ();

    const char *tgk = NULL;
    value *tgp = NULL;
    value *tgv = tg->_search_path_expr (akey, &tgk, &tgp);
    KVR_ASSERT (tgv == NULL);

    if (tgk && tgp)
    {
      KVR_ASSERT (tgp->is_map () || tgp->is_array ());

      if (tgp->is_map ())
      {
        pair *p = tgp->insert_null (tgk);
        value *v = p->get_value ();
        v->copy (aval);
      }
      else if (tgp->is_array ())
      {
#if KVR_DEBUG
        sz_t ki = atoi (tgk);
        sz_t sz = tgp->size ();
        KVR_ASSERT (ki == sz);
#endif
        value *v = tgp->push_null ();
        v->copy (aval);
      }
    }

    p = cursor.get ();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_patch_rem (const value *rem)
{
  KVR_ASSERT (rem);

  value *tg = this;

  for (sz_t c = rem->size (); c >= 1; --c) // start from bottom (for array removal)
  {
    sz_t i = c - 1;

    value *rval = rem->element (i);
    KVR_ASSERT (rval);

    const char *rkey = rval->get_string ();
    KVR_ASSERT (rkey);

    const char *tgk = NULL;
    value *tgp = NULL;
    value *tgv = tg->_search_path_expr (rkey, &tgk, &tgp);

    if (tgp && tgv)
    {
      KVR_ASSERT (tgp->is_map () || tgp->is_array ());

      if (tgp->is_map ())
      {
        pair *p = tgp->find (tgk);
        KVR_ASSERT (tgv == p->get_value ());
        tgp->remove (p);
      }
      else if (tgp->is_array ())
      {
#if KVR_DEBUG
        sz_t ki = atoi (tgk);
        sz_t sz = tgp->size ();
        KVR_ASSERT ((ki + 1) == sz);
#endif
        tgp->pop ();
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::_insert_kv (key *k, value *v)
{
  KVR_ASSERT (k);
  KVR_ASSERT (v);
  KVR_ASSERT (is_map ());

  pair *p = NULL;

#if KVR_DEBUG
  p = (k->m_ref <= 1) ? NULL : m_data.m.find (k);
  KVR_ASSERT (p == NULL);
#endif

  p = m_data.m.insert (k, v);

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::_push_v (value *v)
{
  KVR_ASSERT (v);
  KVR_ASSERT (is_array ());

  this->m_data.a.push (v);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::value::array
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::array::init (sz_t size)
{
  KVR_ASSERT (size > 0);

  sz_t allocsz = (size + (CAP_INCR - 1)) & ~(CAP_INCR - 1);
  m_ptr = new value * [allocsz];
#if KVR_DEBUG
  memset (m_ptr, 0, sizeof (kvr::value *) * allocsz); // debug-only
#endif
  m_cap = allocsz;
  m_len = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::array::deinit ()
{
  KVR_ASSERT (m_ptr);
  delete [] m_ptr;
  m_ptr = NULL;
  //return (void) 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::array::push (value *v)
{
  KVR_ASSERT (v);

  if (m_len >= m_cap)
  {
    KVR_ASSERT (m_ptr);

    // resize
    sz_t newCap = m_cap + CAP_INCR;
    value ** newPtr = new value * [newCap];
#if KVR_DEBUG
    memset (newPtr, 0, sizeof (kvr::value *) * newCap);
#endif
    memcpy (newPtr, m_ptr, sizeof (kvr::value *) * m_len);
    delete [] m_ptr;

    m_ptr = newPtr;
    m_cap = newCap;
  }

  m_ptr [m_len++] = v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value *kvr::value::array::pop ()
{
#if KVR_DEBUG
  value *v = NULL;

  if (m_len > 0)
  {
    v = m_ptr [--m_len];
    m_ptr [m_len] = NULL;
  }
#else
  value *v = (m_len > 0) ? m_ptr [--m_len] : NULL;
#endif

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#if 0 // unused
kvr::value * kvr::value::array::pop (sz_t index)
{
  value *v = NULL;

  if (index < m_len) // implies m_len > 0
  {
    v = m_ptr [index];

    for (sz_t i = index + 1; i < m_len; ++i)
    {
      m_ptr [i - 1] = m_ptr [i];
    }

    m_ptr [--m_len] = NULL;
  }

  return v;
}
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value * kvr::value::array::elem (sz_t index) const
{
  value *v = (index < m_len) ? m_ptr [index] : NULL;

  return v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::value::map
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::map::init (sz_t size)
{
  KVR_ASSERT (size > 0);

  sz_t allocsz = (size + (CAP_INCR - 1)) & ~(CAP_INCR - 1);
  m_ptr = new pair [allocsz];
  m_cap = allocsz;
  m_size = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::map::deinit ()
{
  delete [] m_ptr;
  m_ptr = NULL;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair *kvr::value::map::insert (key *k, value *v)
{
  KVR_ASSERT (k);
  KVR_ASSERT (v);

  if (m_size >= m_cap)
  {
    KVR_ASSERT (m_ptr);

    // resize
    sz_t newCap = m_cap + CAP_INCR;
    pair *newPtr = new pair [newCap];
    memcpy (newPtr, m_ptr, sizeof (pair) * m_cap);
    delete [] m_ptr;

    m_ptr = newPtr;
    m_cap = newCap;
  }

  pair *p = &m_ptr [m_size++];

  p->m_k = k;
  p->m_v = v;

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool kvr::value::map::remove (pair *p)
{
  KVR_ASSERT (p);
  KVR_ASSERT (p->m_k);
  KVR_ASSERT (p->m_v);

  bool rm = false;

  if (m_size > 0)
  {
#if KVR_OPTIMIZATION_FAST_MAP_REMOVE_ON 
    p->m_k = NULL;
    p->m_v = NULL;
    rm = true;
#else
    for (sz_t i = 0, c = m_cap; i < c; ++i)
    {
      pair *pp = &m_ptr [i];
      if ((pp == p) && pp->m_k)
      {
        KVR_ASSERT (pp->m_v);

        p->m_k = NULL;
        p->m_v = NULL;

        rm = true;

        break;
      }
    }
#endif
  }

  return rm;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair *kvr::value::map::find (const key *k) const
{
  KVR_ASSERT (k);

  pair *p = NULL;

  for (sz_t i = 0, c = m_cap; i < c; ++i)
  {
    pair *pp = &m_ptr [i];

#if 0 // implicitly checked in next 'if' as k cannot be null
    if (!pp->m_k)
    {
      continue;
    }
#endif    

    if (pp->m_k == k)
    {
      KVR_ASSERT (pp->m_v);
      p = pp;
      break;
    }
  }
 
  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::value::cursor
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::pair * kvr::value::cursor::get ()
{
#if 1
  pair *p = NULL;

  if (m_index < m_map->m_size)
  {
    p = &m_map->m_ptr [m_index++];

    while (p && !p->m_k)
    {
      p = (m_index < m_map->m_size) ? &m_map->m_ptr [m_index++] : NULL;
    }
  }
#else
  static pair dummy;
  pair *p = &dummy;

  while (p && !p->m_k)
  {
    p = (m_index < m_map->m_size) ? &m_map->m_ptr [m_index++] : NULL;
  }
#endif

  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// kvr::value::strbuffer
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value::strbuffer::strbuffer () : m_str (NULL), m_len (0)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

kvr::value::strbuffer::~strbuffer ()
{
  if (m_str) delete [] m_str;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

const char *kvr::value::strbuffer::get_string () const
{
  return m_str;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

size_t kvr::value::strbuffer::get_length () const
{
  return m_len;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void kvr::value::strbuffer::_reset ()
{
  if (m_str) { delete [] m_str; }
  m_str = NULL;
  m_len = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
